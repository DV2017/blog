{"version":3,"sources":["apis/jsonPlaceholder.js","actions/index.js","components/UserHeader.js","components/PostList.js","components/App.js","reducers/index.js","reducers/postsReducer.js","reducers/usersReducer.js","index.js"],"names":["axios","create","baseURL","uniqueUser","getState","posts","map","post","userId","filter","value","index","self","indexOf","fetchUser","id","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","dispatch","response","wrap","_context2","prev","next","jsonPlaceholder","get","concat","sent","type","payload","data","stop","_x2","apply","this","arguments","UserHeader","user","props","react_default","createElement","className","name","Component","connect","state","ownProps","users","find","PostList","fetchPostsAndUsers","key","title","body","components_UserHeader","renderPosts","_ref3","_callee3","_context3","_ref","_callee","_context","slice","_x","forEach","_x3","_x4","App","components_PostList","combineReducers","length","undefined","action","toConsumableArray","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","components_App","document","querySelector"],"mappings":"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","file":"static/js/main.8be8bcf2.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com'\n});","import jsonPlaceholder from '../apis/jsonPlaceholder';\n\n//callback function to optimise network calls\n//so that only unique users are called by the dispatch method\nfunction uniqueUser(getState) {\n  //1st get array of userIds from state.posts using getState()\n  let getUsersFromPosts = getState().posts.map(post => {\n    return post.userId;\n  });\n  //2nd filter the array to get only unique ids\n  //ES5 syntax\n  return getUsersFromPosts.filter(function (value, index, self) {\n    return self.indexOf(value) === index;\n  });\n}\n\n//callback\nexport const fetchPosts = () => {\n  return async (dispatch) => {\n    //async operation\n    const response = await jsonPlaceholder.get('/posts');\n\n    //thunk allows us to call dispatch manually\n    //limit response data to 10\n    dispatch({ type: 'FETCH_POSTS', payload: response.data.slice(5, 50) });\n  }\n};\n\n//callback\n//without the arrow function\nexport const fetchUser = function (id) {\n  return async function (dispatch) {\n    const response = await jsonPlaceholder.get(`/users/${id}`);\n    dispatch({ type: 'FETCH_USER', payload: response.data });\n  }\n}\n\n/**\n * MAIN FUNCTION\n * calling redux thunk giving dispatch and getState as arguments\n * implementing an alternative to memoize (see index-memoize.js)\n * calls fetchPosts() and fetchUser() action creators successively\n */\nexport const fetchPostsAndUsers = function () {\n  return async function (dispatch, getState) {\n    //using dispatch function to call action creators\n    await dispatch(fetchPosts());\n    // console.log(getState().posts);\n    // console.log(getState().posts[5].userId);\n\n    //get unique user by callback function\n    let uniqueUserIds = uniqueUser(getState);\n\n    //dispatch fetchUser() action creator\n    // there is no need to await the result becuase there is no subsequent action\n    //fetching data only once using unique ids.\n    uniqueUserIds.forEach((id) => dispatch(fetchUser(id)));\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\n\nclass UserHeader extends Component {\n\n  render() {\n    const { user } = this.props;\n\n    if (!user) {\n      return null;\n    }\n\n    return (\n      <div className=\"header\">By {user.name}</div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const { users } = state;\n  const { userId } = ownProps;\n  const user = users.find((user) => user.id === userId);\n  return { user: user };\n}\n\nexport default connect(mapStateToProps)(UserHeader);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPostsAndUsers } from '../actions';\nimport UserHeader from \"./UserHeader\";\n\nclass PostList extends Component {\n\n  componentDidMount() {\n    this.props.fetchPostsAndUsers();\n  }\n\n  renderPosts() {\n    const { posts } = this.props;\n    return posts.map(post => {\n      return (\n        <div className=\"item\" key={post.id}>\n          <i className=\"ui big middle aligned icon user\"></i>\n          <div className=\"content\">\n            <div className=\"description\">\n              <h3 className=\"header\">{post.title}</h3>\n              <p>{post.body}</p>\n            </div>\n            <UserHeader userId={post.userId} />\n          </div>\n        </div>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"ui relaxed divided list\">\n        {this.renderPosts()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { posts: state.posts };\n}\n\nexport default connect(\n  mapStateToProps,\n  { fetchPostsAndUsers: fetchPostsAndUsers }\n)(PostList);","import React from 'react';\nimport PostList from \"./PostList\";\n\nconst App = () => {\n  return (\n    <div className=\"ui container\">\n      <PostList />\n    </div>\n  );\n}\n\nexport default App;","import { combineReducers } from \"redux\";\nimport postsReducer from \"./postsReducer\";\nimport usersReducer from \"./usersReducer\";\n\nexport default combineReducers({\n  posts: postsReducer,\n  users: usersReducer\n});","//reducer\nexport default (state = [], action) => {\n  switch (action.type) {\n    case 'FETCH_POSTS':\n      return action.payload;\n    default:\n      return state;\n  }\n}","export default (state = [], action) => {\n  switch (action.type) {\n    case 'FETCH_USER':\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from 'redux-thunk';\n\nimport App from \"./components/App\";\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'));"],"sourceRoot":""}